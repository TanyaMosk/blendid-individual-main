import "./style.css";

// const horses = [
//   "Secretarit",
//   "Eclipse",
//   "West Australian",
//   "Flying Fox",
//   "Seabiscult",
// ];

// console.log(
//   "%c –ü–æ—á–∞—Ç–æ–∫ –∑–∞—ó–∑–¥—É, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è",
//   "color: brown; font-size: 14px"
// );
// // console.log(
// //   '%c –ü–µ—Ä–µ–º—ñ–≥ ${1}, —Ñ—ñ–Ω—ñ—à—É–≤–∞–≤ –∑–∞ ${1} —á–∞—Å—É',
// //   'color: green; font-size: 14px',
// // );
// // console.log(
// //   '%c –ó–∞—ó–∑–¥ –∑–∞–∫—ñ–Ω—Å–∏–≤—Å—è, —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è'
// //   'color: blue; font-size: 14px',
// // );

// // run('Mango').then(x => console.log(x))

// // –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—å –ø–æ –º–∞—Å–∏–≤—É, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –¥–µ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—è –≤–∏–∫–æ–Ω—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é run
// const promises = horses.map((horse) => run(horse));
// // —Ç–µ–∂ —Å–∞–º–µ
// // const promises = horses.map(run);

// Promise.race(promises).then(({ horse, time }) => {
//   console.log(
//     `%c –ü–µ—Ä–µ–º—ñ–≥ ${horse}, —Ñ—ñ–Ω—ñ—à—É–≤–∞–≤ –∑–∞ ${time} —Å–µ–∫—É–Ω–¥–∏`,
//     "color: green; font-size: 14px;"
//   );
// });

// function run(horse) {
//   return new Promise((resolve, reject) => {
//     const time = getRandomTime(2000, 3500);

//     setTimeout(() => {
//       resolve({ horse, time });
//     }, time);
//   });
// }

// function getRandomTime(min, max) {
//   return Math.floor(Math.random() * (max - min + 1) + min);
// }

const horses = [
  "Secretariat",
  "Eclipse",
  "West Australian",
  "Flying Fox",
  "Seabiscuit",
];

let raceCounter = 0;
const refs = {
  startBtn: document.querySelector(".js-start-race"),
  winnerField: document.querySelector(".js-winner"),
  progressField: document.querySelector(".js-progress"),
  tableBody: document.querySelector(".js-results-table > tbody"),
};

refs.startBtn.addEventListener("click", onStart);

function onStart() {
  raceCounter += 1;
  const promises = horses.map(run);

  updateWinnerField("");
  updateProgressField("ü§ñ –ü–æ—á–∞—Ç–æ–∫ –∑–∞—ó–∑–¥—É, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è!");
  determineWinner(promises);
  waitForAll(promises);
}

function determineWinner(horsesP) {
  Promise.race(horsesP).then(({ horse, time }) => {
    updateWinnerField(`üéâ –ü–µ—Ä–µ–º—ñ–≥ ${horse}, —Ñ—ñ–Ω—ñ—à—É–≤–∞–≤ –∑–∞ ${time} —Å–µ–∫—É–Ω–¥–∏`);
    updateResultsTable({ horse, time, raceCounter });
  });
}

function waitForAll(horsesP) {
  Promise.all(horsesP).then(() => {
    updateProgressField("üìù –ó–∞—ó–∑–¥ –∑–∞–∫—ñ–Ω—Å–∏–≤—Å—è, —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è.");
  });
}

function updateWinnerField(message) {
  refs.winnerField.textContent = message;
}

function updateProgressField(message) {
  refs.progressField.textContent = message;
}

function updateResultsTable({ horse, time, raceCounter }) {
  const tr = /*html*/`
  <tr>
  <td>${raceCounter}</td>
  <td>${horse}</td>
  <td>${time}</td>
  </tr>`;
  refs.tableBody.insertAdjacentHTML("beforeend", tr);
}

/*
 * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞
 */

/*
 * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤
 */

function run(horse) {
  return new Promise((resolve) => {
    const time = getRandomTime(2000, 3500);

    setTimeout(() => {
      resolve({ horse, time });
    }, time);
  });
}

function getRandomTime(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}